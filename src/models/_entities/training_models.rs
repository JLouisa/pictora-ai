//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use super::sea_orm_active_enums::BasedOn;
use super::sea_orm_active_enums::Ethnicity;
use super::sea_orm_active_enums::EyeColor;
use super::sea_orm_active_enums::Sex;
use super::sea_orm_active_enums::Status;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "TrainingModels")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub pid: Uuid,
    pub user_id: i32,
    pub name: String,
    pub age: i32,
    pub bald: bool,
    pub steps: i32,
    pub create_mask: bool,
    pub is_style: bool,
    pub trigger_word: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub tensor_path: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub thumbnail: Option<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub fal_output: Option<Json>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub training_images: Option<Json>,
    pub fal_ai_request_id: Option<String>,
    pub s3_key: String,
    pub is_verified: bool,
    pub deleted_at: Option<DateTimeWithTimeZone>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub sex: Sex,
    pub ethnicity: Ethnicity,
    pub training_status: Status,
    #[sea_orm(column_name = "basedOn")]
    pub based_on: BasedOn,
    pub eye_color: EyeColor,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::images::Entity")]
    Images,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::images::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Images.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}
