// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// bunx prisma migrate dev --name 
// cargo loco db entities

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Sex {
  Male
  Female
}

enum Ethnicity {
  White
  Black
  Pacific
  Hispanic
  Asian
  SouthEastAsian
  SouthAsian
  MiddleEastern
}

enum BasedOn {
  RealPerson
  CreateInfluencerAI
}

enum EyeColor {
  Brown
  Blue
  Green
  Grey
  Hazel
  Red
}

enum Emotion {
  Neutral
  Anger
  Disgust
  Fear
  Happy
  Sad
  Surprise
}

enum Status {
  Pending
  Processing
  Training
  Completed
  Failed
  Cancelled
}

enum ImageSize {
  Square
  SquareHD
  Portrait43
  Portrait169
  Landscape43
  Landscape169
}

enum ImageFormat {
  Png
  Jpeg
  Zip
}

model Users {
  id                         Int       @id @default(autoincrement())
  pid                        String    @unique @db.Uuid
  email                      String    @unique @db.VarChar(255)
  password                   String    @db.VarChar(255)
  api_key                    String    @unique @db.VarChar(255)
  name                       String    @db.VarChar(255)
  reset_token                String?   @db.VarChar(255)
  reset_sent_at              DateTime? @db.Timestamptz
  email_verification_token   String?   @db.VarChar(255)
  email_verification_sent_at DateTime? @db.Timestamptz
  email_verified_at          DateTime? @db.Timestamptz
  magicLink_token            String?   @db.VarChar(255)
  magicLink_expiration       DateTime? @db.Timestamptz

  TrainingModels TrainingModels[]
  UserCredits    UserCredits[]
  Images         Images[]
  Transactions   Transactions[]

  @@index([pid], name: "idx-users-pid")
  @@index([email], name: "idx-users-email")
}

model TrainingModels {
  id                Int       @id @default(autoincrement())
  pid               String    @unique @db.Uuid
  user_id           Int
  name              String    @db.VarChar(255)
  age               Int
  sex               Sex
  ethnicity         Ethnicity
  basedOn           BasedOn
  eye_color         EyeColor
  bald              Boolean   @default(false)
  steps             Int
  create_mask       Boolean
  is_style          Boolean
  trigger_word      String    @db.VarChar(255)
  tensor_path       String?
  thumbnail         String?
  training_status   Status
  fal_output        Json?
  training_images   Json?
  fal_ai_request_id String?   @db.VarChar(255)
  s3_key            String    @db.VarChar(255)
  is_verified       Boolean   @default(false)
  deleted_at        DateTime? @db.Timestamptz
  created_at        DateTime  @default(now()) @db.Timestamptz
  updated_at        DateTime  @db.Timestamptz

  user   Users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Images Images[]

  @@index([pid], name: "idx-training_models-pid")
  @@index([user_id], name: "idx-user_id-id")
}

model UserCredits {
  id            Int      @id @default(autoincrement())
  pid           String   @unique @db.Uuid
  user_id       Int      @unique
  credit_amount Int      @default(0)
  model_amount  Int      @default(0)
  created_at    DateTime @default(now()) @db.Timestamptz
  updated_at    DateTime @db.Timestamptz

  user Users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Images {
  id                  Int         @id @default(autoincrement())
  pid                 String      @unique @db.Uuid
  user_id             Int
  training_model_id   Int
  user_prompt         String
  sys_prompt          String
  num_inference_steps Int
  content_type        ImageFormat
  status              Status
  image_size          ImageSize
  fal_ai_request_id   String      @db.VarChar(255)
  width               Int
  height              Int
  image_url           String
  image_url_s3        String
  is_favorite         Boolean
  deleted_at          DateTime?   @db.Timestamptz
  created_at          DateTime    @default(now()) @db.Timestamptz
  updated_at          DateTime    @db.Timestamptz

  user           Users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  training_model TrainingModels @relation(fields: [training_model_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([pid], name: "idx-images-pid")
  @@index([user_id], name: "idx-images-user_id")
  @@index([training_model_id], name: "idx-images-training_model_id")
}

model Transactions {
  id            Int      @id @default(autoincrement())
  pid           String   @unique @db.Uuid
  user_id       Int
  credit_amount Int
  model_amount  Int
  currency      String   @db.VarChar(255)
  payment_id    String   @db.VarChar(255)
  order_id      String   @db.VarChar(255)
  plan          String   @db.VarChar(255)
  status        Status
  created_at    DateTime @default(now()) @db.Timestamptz
  updated_at    DateTime @db.Timestamptz

  user Users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([pid], name: "idx-transactions-pid")
  @@index([user_id], name: "idx-transactions-user_id")
}

model Packs {
  id           Int      @id @default(autoincrement())
  pid          String   @unique @db.Uuid
  name         String   @db.VarChar(255)
  description  String
  pack_prompts String
  credits      Int
  amount       Int
  image_url    String
  created_at   DateTime @default(now()) @db.Timestamptz
  updated_at   DateTime @db.Timestamptz

  @@index([pid], name: "idx-packs-pid")
}
